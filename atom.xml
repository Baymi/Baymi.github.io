<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陈玄一</title>
  
  <subtitle>海上烟火，心底微光</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://baymi.github.io/"/>
  <updated>2019-09-29T08:24:30.056Z</updated>
  <id>https://baymi.github.io/</id>
  
  <author>
    <name>陈玄一</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>近期React重构Vue的学习分享</title>
    <link href="https://baymi.github.io/2019/08/29/%E8%BF%91%E6%9C%9FReact%E9%87%8D%E6%9E%84Vue%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB/"/>
    <id>https://baymi.github.io/2019/08/29/近期React重构Vue的学习分享/</id>
    <published>2019-08-29T01:04:12.000Z</published>
    <updated>2019-09-29T08:24:30.056Z</updated>
    
    <content type="html"><![CDATA[<p>这几个月时间，工作上的琐事比较多，博客荒废了很久~Orz<br>期间主要做的工作就是对之前的一个可视化3d-GIS项目进行重构，方案思路是从React重构至Vue<br>原因有二，一是项目需要，二是对当前使用率最高的两种主流前端框架进行一个系统的评估和使用</p><h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>主要基于开源3dGIS-Cesium，使用Webpack对项目进行工程化搭建，最早我们本地有一套基于Cesium重构的底层框架，简称Geo吧。Geo对Cesium的API进行了二次封装，例如我们在实体对象集合内添加一个Point。</p><h4 id="Cesium原生"><a href="#Cesium原生" class="headerlink" title="Cesium原生"></a>Cesium原生</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addPoint</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    viewer.entities.add(&#123;</span><br><span class="line">    id: <span class="string">"obis"</span>,</span><br><span class="line">        position : Cesium.Cartesian3.fromDegrees(<span class="number">123</span>, <span class="number">23</span>),</span><br><span class="line">        point : &#123;</span><br><span class="line">            pixelSize : <span class="number">10</span>,</span><br><span class="line">            color : Cesium.Color.YELLOW</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Geo封装"><a href="#Geo封装" class="headerlink" title="Geo封装"></a>Geo封装</h4><a id="more"></a> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addPoint</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ponit = <span class="keyword">new</span> Geo.Point([<span class="number">123</span>, <span class="number">23</span>], &#123;</span><br><span class="line">    id: <span class="string">"obis"</span>,</span><br><span class="line">    pixelSize: <span class="number">10</span>,</span><br><span class="line">    color: <span class="keyword">new</span> Geo.Color.YELLOW</span><br><span class="line">&#125;).addTo(earth.features);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两种方案实则都是在entity集合中增加一个构造函数的对象，然后通过回调方法动态改变底层视图view的展示效果。</p><h3 id="架构实现"><a href="#架构实现" class="headerlink" title="架构实现"></a>架构实现</h3><p>因为项目需要，甲方都是爸爸~o(╥﹏╥)o<br>重构框架是甲方技术团队提前搭建好的，我们拿过来添加重构之后的API，把相关方法封装成类库以供他们远程调用。</p><p>以下是项目结构，与react项目结构基本一致，感谢webpack做出的卓越贡献！</p><div class="img-center-container"><br><img src="/2019/08/29/近期React重构Vue的学习分享/vue-structure.png"><br></div><h3 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h3><p>之前react相关的那个项目结构里使用了Mobx对状态进行全局管理，这边提供的框架并没有使用vue全家桶中与之对应的vuex，对方技术组也禁止我们进行多余的自定义设定改变原来的项目结构，那我们就只能回归最本质的props传值以及生命周期的使用。</p><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>熟悉react架构的朋友都清楚，react的模板语言是官方定义的jsx，将html结构当做js的对象来写，方便引用以及对架构进行操作，使用频率最高的可能就是遍历一个树或者利用三元判断进行内容元素的改变。<br>但是接触vue之后，我发现vue主要使用的是其定义的template模板，从语法的实现上更贴近我们最早的前端三把刀（html/js/css）的关系。像我习惯了上面import，下面写html标签的一下子感觉又回到的青春，太熟悉了~可能这也是初学者更愿意亲近vue的原因之一。</p><p>对我来说，使用的差别最明显在于vue更简单，直接的双向绑定，一个【：】解决一切问题，整个结构相比react要更优雅。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Panel</span> <span class="attr">:position</span>=<span class="string">"panelPosition"</span> <span class="attr">title</span>=<span class="string">"台风轨迹"</span> @<span class="attr">close</span>=<span class="string">"$emit('close')"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 20px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> @<span class="attr">click</span>=<span class="string">"playTyphoon()"</span> <span class="attr">v-if</span>=<span class="string">"playBtn"</span>&gt;</span>播放<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> @<span class="attr">click</span>=<span class="string">"playTyphoon()"</span> <span class="attr">v-else</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span> @<span class="attr">click</span>=<span class="string">"deleteTyphoon()"</span>&gt;</span>清除<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"color-container"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in typhoonStrengthColor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"color-box"</span> <span class="attr">:style</span>=<span class="string">"&#123;backgroundColor:item&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-box"</span>&gt;</span>强度-&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin:10px 0;"</span> <span class="attr">v-if</span>=<span class="string">"yearFlag"</span>&gt;</span>年份：&#123;&#123;year&#125;&#125;年<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Panel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TyphoonCharts</span> <span class="attr">v-if</span>=<span class="string">"showCharts"</span> @<span class="attr">close</span>=<span class="string">"showCharts=false"</span>&gt;</span><span class="tag">&lt;/<span class="name">TyphoonCharts</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>看着就舒服有没有，if-else直接参数化，循环也是。也就是说你只要把数据结构写好，可以把代码精简到最原本的状态，简单几个开合标签就能完成一个复杂带数据绑定的页面实现。当然我后来想了想，其实react的好处也很明显，html结构更精简，只关心jsx中输出的对象即可，两者各有各的好处。</p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>因为这次重构的任务相对简单，没有太过复杂的组件逻辑，所以用的最多的就是【初始化-mounted】、【销毁-beforeDestroy】，在react中与之对应的是【componentDidMount】、【componentWillUnmount】。要我选肯定选vue了，因为字母少，好记！</p><h4 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h4><p>父子组件传值props，组件内部state引用这个基本没差，不过vue里面没有命名为state，其实一样的。在单个组件内，直接this就可以。相比来说react已经走到hooks这步了，感觉vue这个模式走不久，尤大也说vue要重新架构，个人觉得react还是以后主流，vue2.0光芒也很足。</p><p>简单写一些，项目原因没法贴更多代码，以后有空再补再添加后续。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几个月时间，工作上的琐事比较多，博客荒废了很久~Orz&lt;br&gt;期间主要做的工作就是对之前的一个可视化3d-GIS项目进行重构，方案思路是从React重构至Vue&lt;br&gt;原因有二，一是项目需要，二是对当前使用率最高的两种主流前端框架进行一个系统的评估和使用&lt;/p&gt;
&lt;h3 id=&quot;项目简介&quot;&gt;&lt;a href=&quot;#项目简介&quot; class=&quot;headerlink&quot; title=&quot;项目简介&quot;&gt;&lt;/a&gt;项目简介&lt;/h3&gt;&lt;p&gt;主要基于开源3dGIS-Cesium，使用Webpack对项目进行工程化搭建，最早我们本地有一套基于Cesium重构的底层框架，简称Geo吧。Geo对Cesium的API进行了二次封装，例如我们在实体对象集合内添加一个Point。&lt;/p&gt;
&lt;h4 id=&quot;Cesium原生&quot;&gt;&lt;a href=&quot;#Cesium原生&quot; class=&quot;headerlink&quot; title=&quot;Cesium原生&quot;&gt;&lt;/a&gt;Cesium原生&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addPoint&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    viewer.entities.add(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	id: &lt;span class=&quot;string&quot;&gt;&quot;obis&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        position : Cesium.Cartesian3.fromDegrees(&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        point : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pixelSize : &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            color : Cesium.Color.YELLOW&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Geo封装&quot;&gt;&lt;a href=&quot;#Geo封装&quot; class=&quot;headerlink&quot; title=&quot;Geo封装&quot;&gt;&lt;/a&gt;Geo封装&lt;/h4&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://baymi.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="https://baymi.github.io/tags/React/"/>
    
      <category term="Vue" scheme="https://baymi.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>React源码学习</title>
    <link href="https://baymi.github.io/2019/05/27/React%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>https://baymi.github.io/2019/05/27/React源码学习/</id>
    <published>2019-05-27T07:37:40.000Z</published>
    <updated>2019-05-29T01:18:01.996Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://juejin.im/post/5983dfbcf265da3e2f7f32de" target="_blank" rel="noopener">https://juejin.im/post/5983dfbcf265da3e2f7f32de</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> React = &#123;</span><br><span class="line">Component: ReactComponent,</span><br><span class="line">createElement: createElement,</span><br><span class="line">createClass: ReactClass.createClass</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = React;</span><br></pre></td></tr></table></figure></p><p>这里抛出一个问题，为什么<code>module.exports</code>可以直接import，看到这里我知道应该是和转码有关系，参考里有给出解释。<br>babel解析：<code>(ES6)import === (CommonJS)require</code></p><p>还提到了一点，这个在我看源码之前就很奇怪，为什么我们写组件的时候，<code>extends Component</code>可以直接写成<code>extends React.Component</code>,看过上面代码之后就很清楚了。</p><a id="more"></a> <p>临时帮忙解决一下cesium的地形影像写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> terrainProvider = <span class="keyword">new</span> Cesium.CesiumTerrainProvider(&#123;</span><br><span class="line">  url:<span class="string">"地形tif瓦片地址"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> imageryProvider = <span class="keyword">new</span> Cesium.UrlTemplateImageryProvider(&#123;</span><br><span class="line">  url:<span class="string">"http://&#123;s&#125;.tianditu.com/DataServer?T=img_w&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;l=&#123;z&#125;"</span>,</span><br><span class="line">  credit: <span class="keyword">new</span> Cesium.Credit(<span class="string">"天地图全球影像服务"</span>),</span><br><span class="line">  subdomains: [<span class="string">"t0"</span>,<span class="string">"t1"</span>,<span class="string">"t2"</span>,<span class="string">"t3"</span>,<span class="string">"t4"</span>,<span class="string">"t5"</span>,<span class="string">"t6"</span>,<span class="string">"t7"</span>],</span><br><span class="line">  tilingScheme: <span class="keyword">new</span> Cesium.WebMercatorTilingScheme(), </span><br><span class="line">  maximumLevel: <span class="number">18</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> viewer = <span class="keyword">new</span> Ceisum.Viewer(<span class="string">"容器ID"</span>,&#123;</span><br><span class="line">  terrainProvider: terrainProvider,<span class="comment">/*地形*/</span></span><br><span class="line">  imageryProvider: imageryProvider<span class="comment">/*影像*/</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;a href=&quot;https://juejin.im/post/5983dfbcf265da3e2f7f32de&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/5983dfbcf265da3e2f7f32de&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; React = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Component: ReactComponent,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	createElement: createElement,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	createClass: ReactClass.createClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = React;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里抛出一个问题，为什么&lt;code&gt;module.exports&lt;/code&gt;可以直接import，看到这里我知道应该是和转码有关系，参考里有给出解释。&lt;br&gt;babel解析：&lt;code&gt;(ES6)import === (CommonJS)require&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;还提到了一点，这个在我看源码之前就很奇怪，为什么我们写组件的时候，&lt;code&gt;extends Component&lt;/code&gt;可以直接写成&lt;code&gt;extends React.Component&lt;/code&gt;,看过上面代码之后就很清楚了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://baymi.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="源码" scheme="https://baymi.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>yarn更新node-sass报错问题</title>
    <link href="https://baymi.github.io/2019/05/09/yarn%E6%9B%B4%E6%96%B0node-sass%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
    <id>https://baymi.github.io/2019/05/09/yarn更新node-sass报错问题/</id>
    <published>2019-05-09T02:28:23.000Z</published>
    <updated>2019-05-09T05:57:21.945Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>npm和yarn混用之后，更新node_modules之后出现包版本报错以及yarn进度停止的问题<br><img src="/2019/05/09/yarn更新node-sass报错问题/yarn-building.png" title="yarn卡进度"><br><a id="more"></a> </p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>最初觉得是yarn版本或者npm版本冲突，更新至最新之后问题仍然存在，后排查得出结论是国外镜像原因</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>与修改npm镜像方法一致，修改为国内淘宝镜像<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config <span class="keyword">set</span> registry <span class="comment">https:</span>//<span class="comment">registry.npm.taobao.org -g</span></span><br></pre></td></tr></table></figure></p><p>node-sass失败的原因基本也是网络超时的原因，配置如下<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config set sass_binary_site http://cdn.npm.taobao.org/dist/<span class="keyword">node</span><span class="title">-sass</span> -g</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;npm和yarn混用之后，更新node_modules之后出现包版本报错以及yarn进度停止的问题&lt;br&gt;&lt;img src=&quot;/2019/05/09/yarn更新node-sass报错问题/yarn-building.png&quot; title=&quot;yarn卡进度&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://baymi.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="工具" scheme="https://baymi.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Three.js学习</title>
    <link href="https://baymi.github.io/2019/05/06/Three-js%E5%AD%A6%E4%B9%A0/"/>
    <id>https://baymi.github.io/2019/05/06/Three-js学习/</id>
    <published>2019-05-06T03:02:19.000Z</published>
    <updated>2019-05-07T09:19:38.889Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>&#160; &#160; &#160; &#160;从事3D-GIS方向的工作快有两年了，期间手头有两个项目一直使用的是 <a href="https://cesiumjs.org/" target="_blank" rel="noopener"><em>Cesium</em></a>  这一开源3D-GIS工具。对于非地信专业的来说，其实感觉这个结合GIS的前端开发也挺有意思的，所见即所得，信手之处创世纪。<br>&#160; &#160; &#160; &#160;但也有几个痛点，比如对于大量源数据的处理，如何优化球上的流场和3D模型加载变化成了最头疼的问题。<br>&#160; &#160; &#160; &#160;我想如果和WebGL应用的老大哥 <a href="https://threejs.org/" target="_blank" rel="noopener"><em>ThreeJS</em></a> 来做一些结合，是不是可以弥补Cesium原生的不足。</p><p>&#160; &#160; &#160; &#160;相关链接：<a href="https://github.com/AnalyticalGraphicsInc/cesium-threejs-experiment" target="_blank" rel="noopener">cesium-threejs-experiment</a><br><div class="note info">            <p>未完待续… </p>          </div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;从事3D-GIS方向的工作快有两年了，期间手头有两个项目一直使用的是 &lt;a href=
      
    
    </summary>
    
    
      <category term="前端" scheme="https://baymi.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="WebGL" scheme="https://baymi.github.io/tags/WebGL/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript初体验</title>
    <link href="https://baymi.github.io/2019/05/05/TypeScript%E5%88%9D%E6%AC%A1%E5%AD%A6%E4%B9%A0%E4%BA%86%E8%A7%A3%EF%BC%9F/"/>
    <id>https://baymi.github.io/2019/05/05/TypeScript初次学习了解？/</id>
    <published>2019-05-05T02:29:40.000Z</published>
    <updated>2019-05-09T08:31:47.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>ts我个人的理解是可以把它看做是js的改良版本，因为看到目前很多框架都有提到用ts去写一些底层，很多轮子大神也都说ts是趋势，所以感觉需要学习一下。<br>以下参考官网的上手教程，附链接：<a href="https://www.tslang.cn/docs/handbook/typescript-in-5-minutes.html" target="_blank" rel="noopener">TypeScript</a></p><a id="more"></a> <p>安装过程不赘述了，直接看特性</p><h4 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a><strong>类型注解</strong></h4><p>TypeScript里的类型注解是一种轻量级的为函数或变量添加约束的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="string">"Jane User"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = greeter(user);</span><br></pre></td></tr></table></figure><p>下面这段代码会报错，原因是ts提供了静态的代码分析，可以分析代码结构和提供的类型注解。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = greeter(user);</span><br></pre></td></tr></table></figure></p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a><strong>接口</strong></h4><p>这里的接口，我的理解是结合上面类型注解看，只要在接口中声明的类型符合，这个对象就可以被接收。</p><h4 id="类"><a href="#类" class="headerlink" title="类"></a><strong>类</strong></h4><p>类结合接口，常规操作，注意点在于可以在类的构造里面用public声明变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    fullName: string;</span><br><span class="line">    <span class="keyword">constructor</span>(public firstName, public middleInitial, public lastName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.fullName = firstName + <span class="string">" "</span> + middleInitial + <span class="string">" "</span> + lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Person &#123;</span><br><span class="line">    firstName: string;</span><br><span class="line">    lastName: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person : Person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, "</span> + person.firstName + <span class="string">" "</span> + person.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> Student(<span class="string">"Jane"</span>, <span class="string">"M."</span>, <span class="string">"User"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = greeter(user);</span><br></pre></td></tr></table></figure></p><h4 id="关于在React中的使用"><a href="#关于在React中的使用" class="headerlink" title="关于在React中的使用"></a><strong>关于在React中的使用</strong></h4><p>用React的组件结构+ts的例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface HelloProps &#123; <span class="attr">compiler</span>: string; framework: string; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 'HelloProps' describes the shape of props.</span></span><br><span class="line"><span class="comment">// State is never set so we use the '&#123;&#125;' type.</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">HelloProps</span>, </span>&#123;&#125;&gt; &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello from &#123;this.props.compiler&#125; and &#123;this.props.framework&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div class="note info">            <p>未完待续… </p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;ts我个人的理解是可以把它看做是js的改良版本，因为看到目前很多框架都有提到用ts去写一些底层，很多轮子大神也都说ts是趋势，所以感觉需要学习一下。&lt;br&gt;以下参考官网的上手教程，附链接：&lt;a href=&quot;https://www.tslang.cn/docs/handbook/typescript-in-5-minutes.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TypeScript&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://baymi.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="语言" scheme="https://baymi.github.io/tags/%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>create-react-app中Mobx修饰符问题</title>
    <link href="https://baymi.github.io/2019/04/28/create-react-app%E4%B8%ADMobx%E4%BF%AE%E9%A5%B0%E7%AC%A6%E9%97%AE%E9%A2%98/"/>
    <id>https://baymi.github.io/2019/04/28/create-react-app中Mobx修饰符问题/</id>
    <published>2019-04-28T08:51:52.000Z</published>
    <updated>2019-05-09T08:33:34.809Z</updated>
    
    <content type="html"><![CDATA[<p>脚手架工具：<strong>create-react-app</strong><br>状态管理集：<strong>Mobx</strong><br>问题：修饰符问题报错（根本原因是cra的维护者阻碍decorator发展，可能是出于规范化考虑）<br><a id="more"></a> </p><p>对于<strong>Babel</strong>版本有限制<br>以下分别是对应版本的解决办法</p><h4 id="Babel6及以下"><a href="#Babel6及以下" class="headerlink" title="Babel6及以下"></a><strong>Babel6及以下</strong></h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-dev babel-plugin-<span class="built_in">transform</span>-decorators-legacy</span><br></pre></td></tr></table></figure><p>package.json中添加babel配置，当然如果你已经<strong>eject</strong>过了，也可以在webpack中配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel"</span>: &#123;</span><br><span class="line">    <span class="string">"plugins"</span>: [</span><br><span class="line">      <span class="string">"transform-decorators-legacy"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"presets"</span>: [</span><br><span class="line">      <span class="string">"react-app"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="Babel7及以上"><a href="#Babel7及以上" class="headerlink" title="Babel7及以上"></a><strong>Babel7及以上</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel"</span>: &#123;</span><br><span class="line">    <span class="string">"plugins"</span>: [</span><br><span class="line">      [<span class="string">"@babel/plugin-proposal-decorators"</span>, &#123; <span class="string">"legacy"</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"presets"</span>: [</span><br><span class="line">      <span class="string">"react-app"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><div class="img-center-container"><br><img src="/2019/04/28/create-react-app中Mobx修饰符问题/mobx_decorators.png" title="Issue提问者截图"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;脚手架工具：&lt;strong&gt;create-react-app&lt;/strong&gt;&lt;br&gt;状态管理集：&lt;strong&gt;Mobx&lt;/strong&gt;&lt;br&gt;问题：修饰符问题报错（根本原因是cra的维护者阻碍decorator发展，可能是出于规范化考虑）&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://baymi.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="BUG" scheme="https://baymi.github.io/tags/BUG/"/>
    
  </entry>
  
  <entry>
    <title>Iceworks工具——初体验</title>
    <link href="https://baymi.github.io/2019/04/26/Iceworks%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/"/>
    <id>https://baymi.github.io/2019/04/26/Iceworks工具的使用感受/</id>
    <published>2019-04-26T09:08:16.000Z</published>
    <updated>2019-05-09T08:34:42.825Z</updated>
    
    <content type="html"><![CDATA[<p><strong>IceWorks,让前端工程变得轻松便捷</strong></p><div class="img-center-container"><br><img src="/2019/04/26/Iceworks工具的使用感受/iceWorks.png" title="IceWorks"><br></div><br>上手版本，客户端，2.19.0，winX64<br><a id="more"></a><br>朋友推荐来的，因为之前一直从事React技术栈方面的工作，一直沿用的是阿里团队的Antd UI框架，所以知道阿里这块的团队一直都很牛<br>但是万万没想到，前端初始化集成已经做到了这个程度了<br>让我想起了大学时候学的.NET的GUI，泪牛满面啊~o(╥﹏╥)o<br><br>下载客户端，呈现的是如下的界面（此时已经新建了一个项目了）<br><div class="img-center-container"><br><img src="/2019/04/26/Iceworks工具的使用感受/toolsUI.png" title="IceWorks"><br></div><br>侧边栏的布局从上至下分别是：项目、模板、区块、组件、插件以及设置项<br><br><strong>项目部分</strong><br>可以通过选择物料源里面的模板进行项目创建，目前官方支持的有以下三个物料库<br><img src="/2019/04/26/Iceworks工具的使用感受/wuliao.png" title="IceWorks"><br>直接选用官方的吧，其他两个社区感觉还不是很完善，内容比较少<br>然后就是创建了，滴滴滴滴，全自动挂机，舒服~<br><img src="/2019/04/26/Iceworks工具的使用感受/yilai.png" title="IceWorks"><br>然后一个依赖完备的工程化项目就搭建好了！<br><div class="img-center-container"><br><img src="/2019/04/26/Iceworks工具的使用感受/jiemian.png" title="IceWorks"><br></div><p>搭建好项目之后，就可以对模板进行自定义修改了，支持各种区块的引入和创建，用了停不下来那种QAQ</p><div class="img-center-container"><br><img src="/2019/04/26/Iceworks工具的使用感受/qukuai.png" title="IceWorks"><br></div><p>目前区块中的物料有小部分还是会报错，譬如依赖问题，相信这个社区以后会越来越好的，可以给前端节约很多项目初期构建的成本</p><p>最后感叹一句，造轮子的才是大神呀~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;IceWorks,让前端工程变得轻松便捷&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;img-center-container&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2019/04/26/Iceworks工具的使用感受/iceWorks.png&quot; title=&quot;IceWorks&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;上手版本，客户端，2.19.0，winX64&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://baymi.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="工具" scheme="https://baymi.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>h5中关于 video 标签autoplay失效的解决方法</title>
    <link href="https://baymi.github.io/2019/04/16/h5%E4%B8%AD%E5%85%B3%E4%BA%8E-video-%E6%A0%87%E7%AD%BEautoplay%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://baymi.github.io/2019/04/16/h5中关于-video-标签autoplay失效的解决方法/</id>
    <published>2019-04-16T01:49:34.000Z</published>
    <updated>2019-05-09T08:35:41.440Z</updated>
    
    <content type="html"><![CDATA[<p><strong>方法：添加muted属性</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tabs = videoUrl.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;TabPane tab=&#123;item.name&#125; key=&#123;index&#125; forceRender=&#123;<span class="literal">true</span>&#125;&gt;</span><br><span class="line">          &lt;div className=&#123;style.coverDiv&#125;/&gt;</span><br><span class="line">          &lt;video src=&#123;item.url&#125; type=<span class="string">"video/mp4"</span> muted controls autoPlay width=<span class="string">"100%"</span> height=<span class="string">"100%"</span>&gt;</span><br><span class="line">            抱歉，你的浏览器不支持video标签。。</span><br><span class="line">          &lt;<span class="regexp">/video&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>TabPane&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;方法：添加muted属性&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="前端" scheme="https://baymi.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="BUG" scheme="https://baymi.github.io/tags/BUG/"/>
    
  </entry>
  
  <entry>
    <title>清明雨上，忆当年否</title>
    <link href="https://baymi.github.io/2019/04/05/%E6%B8%85%E6%98%8E%E9%9B%A8%E4%B8%8A%EF%BC%8C%E5%BF%86%E5%BD%93%E5%B9%B4%E5%90%A6/"/>
    <id>https://baymi.github.io/2019/04/05/清明雨上，忆当年否/</id>
    <published>2019-04-05T03:27:09.000Z</published>
    <updated>2019-05-07T04:18:03.111Z</updated>
    
    <content type="html"><![CDATA[<p><div class="img-center-container"><br><img src="/2019/04/05/清明雨上，忆当年否/qm-2019.jpg" title="清明雨上"><br></div><br><a id="more"></a> </p><center><br>    <strong>清明雨上</strong><br>窗透初晓 日照西桥 云自摇<br>想你当年荷风微摆的衣角<br>木雕流金 岁月涟漪 七年前封笔<br>因为我今生挥毫只为你<br></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div class=&quot;img-center-container&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2019/04/05/清明雨上，忆当年否/qm-2019.jpg&quot; title=&quot;清明雨上&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="节日" scheme="https://baymi.github.io/tags/%E8%8A%82%E6%97%A5/"/>
    
  </entry>
  
  <entry>
    <title>参加院先导专项海洋球建设会议</title>
    <link href="https://baymi.github.io/2019/02/27/%E5%8F%82%E5%8A%A0%E5%85%88%E5%AF%BC%E4%B8%93%E9%A1%B9%E6%B5%B7%E6%B4%8B%E7%90%83%E5%BB%BA%E8%AE%BE%E4%BC%9A%E8%AE%AE/"/>
    <id>https://baymi.github.io/2019/02/27/参加先导专项海洋球建设会议/</id>
    <published>2019-02-27T09:08:41.000Z</published>
    <updated>2019-05-07T09:11:28.977Z</updated>
    
    <content type="html"><![CDATA[<p><strong>会议内容：听各位大佬吹牛</strong><br><a id="more"></a> </p><div class="img-center-container"><br><img src="/2019/02/27/参加先导专项海洋球建设会议/meeting-190227.png" title="会议内容"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;会议内容：听各位大佬吹牛&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="会议" scheme="https://baymi.github.io/tags/%E4%BC%9A%E8%AE%AE/"/>
    
      <category term="出差" scheme="https://baymi.github.io/tags/%E5%87%BA%E5%B7%AE/"/>
    
  </entry>
  
  <entry>
    <title>2019，新的开始，元宵节记</title>
    <link href="https://baymi.github.io/2019/02/19/2019%EF%BC%8C%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B%EF%BC%8C%E5%85%83%E5%AE%B5%E8%8A%82%E8%AE%B0/"/>
    <id>https://baymi.github.io/2019/02/19/2019，新的开始，元宵节记/</id>
    <published>2019-02-19T13:29:32.000Z</published>
    <updated>2019-05-07T04:18:48.327Z</updated>
    
    <content type="html"><![CDATA[<p><div class="img-center-container"><br><img src="/2019/02/19/2019，新的开始，元宵节记/xy-l.jpg" title="上元花灯"><br></div><br><a id="more"></a> </p><center><br>    <strong>青玉案·元夕——辛弃疾</strong><br>东风夜放花千树。更吹落、星如雨。<br>宝马雕车香满路。凤箫声动，玉壶光转，一夜鱼龙舞。<br>蛾儿雪柳黄金缕。笑语盈盈暗香去。<br>众里寻他千百度。蓦然回首，那人却在，灯火阑珊处。<br></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div class=&quot;img-center-container&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2019/02/19/2019，新的开始，元宵节记/xy-l.jpg&quot; title=&quot;上元花灯&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="节日" scheme="https://baymi.github.io/tags/%E8%8A%82%E6%97%A5/"/>
    
  </entry>
  
</feed>
